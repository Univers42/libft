/* ************************************************************************** */
/*                                                                            */
/*   ctype_test_adapted.c - Your test using the new framework                */
/*                                                                            */
/* ************************************************************************** */

#include "test_framework.h"
#include "../ft_ctype.h"
#include <ctype.h>
#include <stdio.h>

#define AMAX 255

/* ========================================================================== */
/*                    Helper: Test a ctype function                           */
/* ========================================================================== */

void test_ctype_function(
    t_test_suite *suite,
    const char *fn_name,
    int (*ft_fn)(int),
    int (*std_fn)(int))
{
    printf("\n\033[1;34m=== Testing %s ===\033[0m\n", fn_name);
    
    int mismatches = 0;
    
    // Test all values from 0 to 255
    for (int i = 0; i <= AMAX; i++)
    {
        t_test_case test = {
            .description = NULL,
            .params = {(void*)(long)i},
            .param_count = 1,
            .compare_type = CMP_BOOL,  // Compare truthiness
            .data_size = sizeof(int)
        };
        
        // Get results
        int ft_result = ft_fn(i);
        int std_result = std_fn(i);
        
        int ft_truth = !!ft_result;
        int std_truth = !!std_result;
        
        // Run the comparison
        run_comparison_test(suite, fn_name, (void*)ft_fn, (void*)std_fn, &test);
        
        // Track mismatches for debug output
        if (ft_truth != std_truth)
        {
            mismatches++;
            printf("[DEBUG] input=%d, ft=%d, std=%d, !!ft=%d, !!std=%d\n",
                   i, ft_result, std_result, ft_truth, std_truth);
        }
    }
    
    if (mismatches > 0)
        printf("\033[1;33mMismatches: %d/%d\033[0m\n", mismatches, AMAX + 1);
    
    // Calculate passed tests for this function
    int passed = (AMAX + 1) - mismatches;
    printf("\033[1;36mScore: %d/%d cases passed\033[0m\n", passed, AMAX + 1);
    
    if (mismatches == 0)
        printf("\033[1;32mAll tests passed for %s!\033[0m\n", fn_name);
    else
        printf("\033[1;31mSome tests failed for %s.\033[0m\n", fn_name);
}

/* ========================================================================== */
/*                    Test All ctype Functions                                */
/* ========================================================================== */

void test_all_ctype_functions(void)
{
    t_test_suite *suite = TEST_SUITE("Complete ctype test suite");
    
    // Function table
    typedef struct {
        const char *name;
        int (*ft_fn)(int);
        int (*std_fn)(int);
    } t_fn_pair;
    
    t_fn_pair functions[] = {
        {"isalnum", ft_isalnum, isalnum},
        {"isblank", ft_isblank, isblank},
        {"isdigit", ft_isdigit, isdigit},
        {"isgraph", ft_isgraph, isgraph},
        {"islower", ft_islower, islower},
        {"isprint", ft_isprint, isprint},
        {"isspace", ft_isspace, isspace},
        {"isupper", ft_isupper, isupper},
        {"tolower", ft_tolower, tolower},
        {"toupper", ft_toupper, toupper}
    };
    
    size_t fn_count = sizeof(functions) / sizeof(functions[0]);
    
    // Test each function
    for (size_t i = 0; i < fn_count; i++)
    {
        test_ctype_function(suite, 
                           functions[i].name,
                           functions[i].ft_fn, 
                           functions[i].std_fn);
    }
    
    // Print comprehensive summary
    printf("\n");
    test_suite_print_summary(suite);
    
    test_suite_destroy(suite);
}

/* ========================================================================== */
/*                    Edge Case Tests                                         */
/* ========================================================================== */

bool is_lowercase_letter(void *result)
{
    int c = (int)(long)result;
    return c >= 'a' && c <= 'z';
}

bool is_uppercase_letter(void *result)
{
    int c = (int)(long)result;
    return c >= 'A' && c <= 'Z';
}

void test_edge_cases(void)
{
    t_test_suite *suite = TEST_SUITE("Edge case tests");
    
    printf("\n\033[1;35m=== Edge Case Testing ===\033[0m\n");
    
    // Test toupper edge cases
    t_edge_case toupper_cases[] = {
        {
            .description = "toupper('a') should be uppercase",
            .params = {(void*)(long)'a'},
            .param_count = 1,
            .validator = is_uppercase_letter
        },
        {
            .description = "toupper('z') should be uppercase",
            .params = {(void*)(long)'z'},
            .param_count = 1,
            .validator = is_uppercase_letter
        },
        {
            .description = "toupper('A') should remain uppercase",
            .params = {(void*)(long)'A'},
            .param_count = 1,
            .validator = is_uppercase_letter
        },
        {
            .description = "toupper('5') should not crash",
            .params = {(void*)(long)'5'},
            .param_count = 1,
            .validator = NULL  // Just ensure it doesn't crash
        }
    };
    
    run_edge_case_batch(suite, "toupper", 
                       (void*)ft_toupper, toupper_cases, 4);
    
    // Test tolower edge cases
    t_edge_case tolower_cases[] = {
        {
            .description = "tolower('A') should be lowercase",
            .params = {(void*)(long)'A'},
            .param_count = 1,
            .validator = is_lowercase_letter
        },
        {
            .description = "tolower('Z') should be lowercase",
            .params = {(void*)(long)'Z'},
            .param_count = 1,
            .validator = is_lowercase_letter
        },
        {
            .description = "tolower('a') should remain lowercase",
            .params = {(void*)(long)'a'},
            .param_count = 1,
            .validator = is_lowercase_letter
        }
    };
    
    run_edge_case_batch(suite, "tolower", 
                       (void*)ft_tolower, tolower_cases, 3);
    
    test_suite_print_summary(suite);
    test_suite_destroy(suite);
}

/* ========================================================================== */
/*                    Boundary Tests                                          */
/* ========================================================================== */

void test_boundaries(void)
{
    t_test_suite *suite = TEST_SUITE("Boundary tests");
    
    printf("\n\033[1;35m=== Boundary Testing ===\033[0m\n");
    
    // Test critical boundary values
    int boundaries[] = {
        -1,    // Below ASCII range
        0,     // NULL character
        31,    // End of control characters
        32,    // Space (first printable)
        47,    // Before digits
        48,    // '0'
        57,    // '9'
        58,    // After digits
        64,    // Before uppercase
        65,    // 'A'
        90,    // 'Z'
        91,    // After uppercase
        96,    // Before lowercase
        97,    // 'a'
        122,   // 'z'
        123,   // After lowercase
        126,   // '~' (last printable)
        127,   // DEL
        128,   // Extended ASCII start
        255    // Max unsigned char
    };
    
    size_t boundary_count = sizeof(boundaries) / sizeof(boundaries[0]);
    
    for (size_t i = 0; i < boundary_count; i++)
    {
        int c = boundaries[i];
        
        t_test_case test = {
            .description = NULL,
            .params = {(void*)(long)c},
            .param_count = 1,
            .compare_type = CMP_BOOL,
            .data_size = sizeof(int)
        };
        
        char test_name[64];
        snprintf(test_name, sizeof(test_name), "isprint(%d)", c);
        run_comparison_test(suite, test_name, 
                           (void*)ft_isprint, (void*)isprint, &test);
    }
    
    test_suite_print_summary(suite);
    test_suite_destroy(suite);
}

/* ========================================================================== */
/*                           MAIN                                             */
/* ========================================================================== */

int main(void)
{
    printf("\n");
    printf("╔════════════════════════════════════════════════════════════════╗\n");
    printf("║                                                                ║\n");
    printf("║              CTYPE FUNCTION TEST SUITE                         ║\n");
    printf("║         Using Enhanced Test Framework                          ║\n");
    printf("║                                                                ║\n");
    printf("╚════════════════════════════════════════════════════════════════╝\n");
    
    // Run all tests
    test_all_ctype_functions();
    test_edge_cases();
    test_boundaries();
    
    printf("\n");
    printf("╔════════════════════════════════════════════════════════════════╗\n");
    printf("║                    TESTING COMPLETE                            ║\n");
    printf("╚════════════════════════════════════════════════════════════════╝\n");
    printf("\n");
    
    return 0;
}